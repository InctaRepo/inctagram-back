// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "windows"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model User {
  id                    String                 @id @default(uuid())
  username              String                 @unique
  email                 String                 @unique
  createdAt             DateTime               @default(now())
  passwordHash          String
  isEmailConfirmed      Boolean                @default(false)
  emailConfirmationCode EmailConfirmationCode?
  passwordRecoveryCode  PasswordRecoveryCode?
  authSessions          AuthSession[]
  externalAccounts      ExternalAccount[]
  profile               UserProfile?

  @@map("users")
}

model UserProfile {
  userId      String    @id @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  firstName   String
  lastName    String
  city        String?
  dateOfBirth DateTime?
  aboutMe     String?
  avatar      String?
  user        User?     @relation(fields: [userId], references: [id])
  posts       Post[]

  posts Post[]

  @@map("user_profiles")
}

model Post {
  id          String       @id @default(uuid())
  userId      String
  description String
  createdAt   DateTime?    @default(now())
  location    String?
  UserProfile UserProfile? @relation(fields: [userId], references: [userId])

  @@map("posts")
}

model ExternalAccount {
  providerId String   @id
  email      String
  provider   String
  userId     String
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("external_accounts")
}

model EmailConfirmationCode {
  userId    String   @id @unique
  createdAt DateTime @default(now())
  code      String
  expireAt  DateTime
  user      User?    @relation(fields: [userId], references: [id])

  @@map("email_confirmation_codes")
}

model PasswordRecoveryCode {
  userId    String   @id @unique
  createdAt DateTime @default(now())
  code      String
  expireAt  DateTime
  user      User?    @relation(fields: [userId], references: [id])

  @@map("password_recovery_codes")
}

model AuthSession {
  id       String   @id @default(uuid())
  userId   String
  deviceId String   @unique
  issuedAt DateTime
  expireAt DateTime
  ip       String
  user     User?    @relation(fields: [userId], references: [id])

  @@map("auth_sessions")
}
